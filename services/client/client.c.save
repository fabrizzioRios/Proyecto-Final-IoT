// Client side C/C++ program to demonstrate Socket programming
#include <arpa/inet.h>
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <unistd.h>
//#include "com.h"
#include "mqtt_frames.h"

#define PORT 5000

pthread_mutex_t socketMutex = PTHREAD_MUTEX_INITIALIZER;

int main(int argc, char const *argv[]) {
  int sock = 0;
  int res;
  struct sockaddr_in serv_addr;
  // char *hello = "Hello from client";
  // char buffer[1024] = {0};
  ssize_t iWriteRc = 0;
  uint8_t *bpInstruction = (uint8_t *)malloc(10);
  sConnect sReturn;
  sConnACK sAcknowledge;
  sPublish sPublish;
  sSubscribe sSubscribe;
  sPingReq sRequest;

  printf("argv[] %s , sizeof %ld \r\n", argv[1], strlen(argv[1]));

  sReturn = vfnCreateFrame(argv[1], sizeof(argv[1]));
  printf("\n vfnCreateFrame \n");
  printf("This is the sFrameType 0x%x \r\n", sReturn.bFrameType);
  printf("This is the wMsgLen 0x%x \r\n", sReturn.wMsgLen);
  printf("This is the wProtlNameLen 0x%x \r\n", sReturn.wProtlNameLen);
  printf("This is the sProtName %s \r\n", sReturn.sProtName);
  printf("This is the bVersion 0x%x \r\n", sReturn.bVersion);
  printf("This is the bConnectFlags 0x%x \r\n", sReturn.bConnectFlags);
  printf("This is the bKeepAlive 0x%x \r\n", sReturn.bKeepAlive);
  printf("This is the wClientIdLen 0x%x \r\n", sReturn.wClientIdLen);
  printf("This is the sClientID %s \r\n", sReturn.sClientID);

  sAcknowledge = vfnCreateCONNACK();

  

  /*int socket(int domain, int type, int protocol);
      AF_INET	= IPv4 Internet protocols
      SOCK_STREAM = Provides sequenced, reliable,
                              two-way, connection-based byte streams.
                              An out-of-band data transmission mechanism may be
     supported. Protocol specifies a particular protocol to be used with the
     socket. Normally only a single protocol exists to support a particular
      socket type within a given protocol family,
      in which case protocol can be specified as 0.
      */
  if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
    printf("error \n");
    return -1;
  }

  // struct sockaddr_in
  //{
  //	sa_family_t    sin_family; /* address family: AF_INET */
  //	in_port_t      sin_port;   /* port in network byte order */
  //	struct in_addr sin_addr;   /* internet address */
  // };
  serv_addr.sin_family = AF_INET;
  serv_addr.sin_port = htons(PORT);
  serv_addr.sin_addr.s_addr = inet_addr("192.168.100.50");

  if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
    printf("\n Connection Failed \n");
    return -1;
  }
  // sFrameConnect.bFrameType = 0x10;
  // sFrameConnect.wMsgLen = wNum;
  // sFrameConnect.wProtlNameLen = 0x0004;
  // sFrameConnect.sProtName = 'MATT';
  // sFrameConnect.bVersion = 0x04;
  // sFrameConnect.bConnectFlags = 0x02;
  // sFrameConnect.bKeepAlive = 0x000A;
  // sFrameConnect.wClientIdLen = 0x0005;
  // sFrameConnectsClientID = 'Mario';

  iWriteRc = send(sock, (char *)&sReturn, strlen((char *)&sReturn), 0);
  if (iWriteRc <= 0) {
    printf("\n Send Failed \n");
    return -1;
  }
  printf("Hello From Client \n");

  while (1) {
    fgets((char *)bpInstruction, 10, stdin);
    pthread_mutex_lock(&socketMutex);
    iWriteRc = send(sock, bpInstruction, strlen((char *)bpInstruction), 0);
    if (iWriteRc <= 0) {
      printf("Shuting down the socket: %ld\n", iWriteRc);
    }
    // Creación de Menu
    printf("Que accion te gustaria hacer?\n");
    printf("Publicar - 1\n");
    printf("Suscribirse - 2\n");
    // Fin menú
    scanf("%i", &res); // Toma de respuesta por parte del cliente
    // Validación de respuesta
    if (res == 1) {

      sPublish =
          vfnCreatePUBLISH((char *)&sPublish.sTopic, (char *)sPublish.sMessage);
      printf("This is the FrameType 0x%x \r\n", sPublish.bFrameType);
      printf("This is the Topic 0x%s \r\n", sPublish.sTopic);
      printf("This is the Message 0x%s \r\n", sPublish.sMessage);
      printf("This is the Topic Lenght %d \r\n", sPublish.wTopicLength);
      printf("This is the Message Lenght 0x%x \r\n", sPublish.wMessageLength);
      printf("This is the Remaining Length 0x%x \r\n",
             sPublish.bRemainingLength);

    } else if (res == 2) {

      sSubscribe = vfnCreateSUBSCRIBE();
      printf("This is the Frame Type 0x%x \r\n", sSubscribe.bFrameType);
      printf("This is the Remaining Length 0x%x \r\n",
             sSubscribe.bRemainingLength);
      printf("This is the Packet Identifier 0x%x \r\n",
             sSubscribe.wPacketIdentifier);
      printf("This is the Topic Name Length %d \r\n",
             sSubscribe.wTopicNameLength);
      printf("This is the Topic 0x%s \r\n", sSubscribe.sTopic);
      printf("This is the QOS 0x%x \r\n", sSubscribe.bRequestedQOS);
    }
    // Término de Validación
    sRequest = vfnCreateREQUEST(); // Creación del Request

    pthread_mutex_unlock(&socketMutex);
    sleep(1);
  }
  return 0;
}
